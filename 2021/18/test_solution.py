import json
from itertools import accumulate

import pytest
from solution import add
from solution import fold
from solution import magnitude
from solution import parse
from solution import reduce_step
from solution import unflatten


def test_parse():
    assert list(parse([[[[[9,8],1],2],3],4])) == [(9, 4), (8, 4), (1, 3), (2, 2), (3, 1), (4, 0)]


@pytest.mark.parametrize(
    "number, expected",
    [
        ([[[[[9,8],1],2],3],4], [[[[0,9],2],3],4]),
        ([7,[6,[5,[4,[3,2]]]]], [7,[6,[5,[7,0]]]]),
        ([[6,[5,[4,[3,2]]]],1], [[6,[5,[7,0]]],3]),
        ([[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]], [[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]),
        ([[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]], [[3,[2,[8,0]]],[9,[5,[7,0]]]]),
    ],
)
def test_reduce_step(number, expected):
    assert reduce_step(parse(number)) == (True, parse(expected))


@pytest.mark.parametrize(
    "numbers, expected",
    [
        (
            """
                [1,2]
                [[3,4],5]
            """,
            [[1,2],[[3,4],5]],
        ),
        (
            """
                [[[[4,3],4],4],[7,[[8,4],9]]]
                [1,1]
            """,
            [[[[0,7],4],[[7,8],[6,0]]],[8,1]],
        ),
        (
            """
                [1,1]
                [2,2]
                [3,3]
                [4,4]
            """,
            [[[[1,1],[2,2]],[3,3]],[4,4]],
        ),
        (
            """
                [1,1]
                [2,2]
                [3,3]
                [4,4]
                [5,5]
            """,
            [[[[3,0],[5,3]],[4,4]],[5,5]],
        ),
        (
            """
                [1,1]
                [2,2]
                [3,3]
                [4,4]
                [5,5]
                [6,6]
            """,
            [[[[5,0],[7,4]],[5,5]],[6,6]],
        ),
        (
            """
                [[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]
                [7,[[[3,7],[4,3]],[[6,3],[8,8]]]]
                [[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]
                [[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]
                [7,[5,[[3,8],[1,4]]]]
                [[2,[2,2]],[8,[8,1]]]
                [2,9]
                [1,[[[9,3],9],[[9,0],[0,7]]]]
                [[[5,[7,4]],7],1]
                [[[[4,2],2],6],[8,7]]
            """,
            [[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]],
        ),
        (
            """
                [[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
                [[[5,[2,8]],4],[5,[[9,9],0]]]
                [6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
                [[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
                [[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
                [[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
                [[[[5,4],[7,7]],8],[[8,3],8]]
                [[9,3],[[9,9],[6,[4,9]]]]
                [[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
                [[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]
            """,
            [[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]],
        ),
    ],
)
def test_add(numbers, expected):
    for line in numbers.strip().splitlines():
        assert unflatten(parse(json.loads(line))) == json.loads(line)

    numbers = [parse(json.loads(line)) for line in numbers.strip().splitlines()]
    assert fold(add, numbers) == parse(expected)


def test_add_large_example_steps():
    numbers = """
        [[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]
        [7,[[[3,7],[4,3]],[[6,3],[8,8]]]]
        [[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]
        [[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]
        [7,[5,[[3,8],[1,4]]]]
        [[2,[2,2]],[8,[8,1]]]
        [2,9]
        [1,[[[9,3],9],[[9,0],[0,7]]]]
        [[[5,[7,4]],7],1]
        [[[[4,2],2],6],[8,7]]
    """
    numbers = [parse(json.loads(line)) for line in numbers.strip().splitlines()]
    expected = [
        [[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]],
        [[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]],
        [[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]],
        [[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]],
        [[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]],
        [[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]],
        [[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]],
        [[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]],
        [[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]],
        [[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]],
    ]
    expected = [parse(number) for number in expected]
    for i, (res, exp) in enumerate(zip(accumulate(numbers, add), expected)):
        assert res == exp


@pytest.mark.parametrize(
    "number, expected",
    [
        ([9,1], 29),
        ([[9,1],[1,9]], 129),
        ([[1,2],[[3,4],5]], 143),
        ([[[[0,7],4],[[7,8],[6,0]]],[8,1]], 1384),
        ([[[[1,1],[2,2]],[3,3]],[4,4]], 445),
        ([[[[3,0],[5,3]],[4,4]],[5,5]], 791),
        ([[[[5,0],[7,4]],[5,5]],[6,6]], 1137),
        ([[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]], 3488),
    ],
)
def test_magnitude(number, expected):
    parsed = parse(number)
    assert unflatten(parse(number)) == number
    assert magnitude(parsed) == expected
