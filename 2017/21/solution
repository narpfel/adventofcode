#!/usr/bin/env python3
from itertools import product

import numpy as np
# Iâ€™m lazy...
from skimage.util import view_as_blocks


PIXEL_ENABLED = {
    ".": False,
    "#": True,
}

START_CONFIGURATION = ".#./..#/###"


def parse_grid(s):
    return np.array([[PIXEL_ENABLED[pixel] for pixel in line] for line in s.split("/")])


def key(grid):
    return grid.tobytes()


def show(grid):
    for line in grid:
        for pixel in line:
            print("#" if pixel else ".", end="")
        print()


def read_input(filename):
    def iter_replacements():
        with open(filename) as lines:
            for line in lines:
                from_, _, to = line.strip().partition(" => ")
                from_ = parse_grid(from_)
                to = parse_grid(to)

                yield from (
                    (flipud(fliplr(np.rot90(from_, rotation))), to)
                    for rotation, fliplr, flipud
                    in product(range(4), [lambda x: x, np.fliplr], [lambda x: x, np.flipud])
                )

    return {key(from_): to for from_, to in iter_replacements()}


def enhance(grid, replacements):
    block_shape = (2, 2) if grid.shape[0] % 2 == 0 else (3, 3)
    return np.vstack([
        np.hstack([replacements[key(block)] for block in block_line])
        for block_line in view_as_blocks(grid, block_shape)
    ])


def solve(grid, replacements, enhancement_count):
    for i in range(enhancement_count):
        grid = enhance(grid, replacements)
    return grid.sum()


def main():
    replacements = read_input("input")
    print(solve(parse_grid(START_CONFIGURATION), replacements, 5))
    print(solve(parse_grid(START_CONFIGURATION), replacements, 18))


if __name__ == "__main__":
    main()
